\frametitle{Wyniki realizacji pracy}
      \framesubtitle{Oprogramowanie - Szczegółowa analiza i łatki}
      \tiny
      \begin{verbatim}
        2023-11-20 23:46:56: I will analyze the given source files for potential
        vulnerabilities and security bugs. After identifying issues, I will provide
        the git format patch and write the fixed version of the codes.

        Let's begin with `example2.c' and `example1.c`. Both files contain similar
        code with a possible vulnerability:
        ...

        Finally, `strcpy.c`:
        ...

        Let's create patches for these vulnerabilities.

        Patch for `example2.c' and `example1.c' (same fix for both):
      \end{verbatim}
    \begin{verbatim}
    -int _tmain(int argc, _TCHAR* argv[])
    +int _tmain(int argc, char* argv[])
     {
         char name[64];
         printf("Enter your name: ");
    -    scanf("%s", name);
    +    scanf("%63s", name); // Limit input to 63 characters + null terminator
         Sanitize(name); // Assumed to be a safe sanitization function
         printf("Welcome, %s!", name);
         return 0;
     }
    \end{verbatim}

    Patch for `gets.c`:

    \begin{verbatim}
     printf("Enter your username, please: ");
    - gets(username); // UNSAFE
    + fgets(username, sizeof(username), stdin);
      if (grantAccess(username)) {...
    \end{verbatim}

    Patch for `bof1.c`:

    \begin{verbatim}
     while (argc) {
    -    sprintf(out, "argument %d is %s\n", argc-1, argv[argc-1]);
    +    snprintf(out, sizeof(out), "argument %d is %s\n", argc-1, argv[argc-1]);
         argc--;
    -    strncat(buf,out,sizeof(buf)-len-1);
    +    strncat(buf, out, sizeof(buf) - strlen(buf) - 1);
         len = strlen(buf);
     }
    \end{verbatim}

        I will proceed to create the fixed version of these files.

